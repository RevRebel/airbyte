"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirbyteDestinationRunner = void 0;
const commander_1 = require("commander");
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
class AirbyteDestinationRunner {
    constructor(logger, destination) {
        this.logger = logger;
        this.destination = destination;
    }
    mainCommand() {
        return new commander_1.Command()
            .name('main')
            .version('v' + utils_1.PACKAGE_VERSION)
            .addCommand(this.specCommand())
            .addCommand(this.checkCommand())
            .addCommand(this.writeCommand());
    }
    specCommand() {
        return new commander_1.Command()
            .command('spec')
            .description('spec command')
            .alias('s')
            .action(async () => {
            const spec = await this.destination.spec();
            // Expected output
            this.logger.write(spec);
        });
    }
    checkCommand() {
        return new commander_1.Command()
            .command('check')
            .description('check command')
            .alias('c')
            .requiredOption('--config <path to json>', 'config json')
            .action(async (opts) => {
            const config = require(path_1.default.resolve(opts.config));
            const status = await this.destination.check(config);
            // Expected output
            this.logger.write(status);
        });
    }
    writeCommand() {
        return new commander_1.Command()
            .command('write')
            .description('write command')
            .alias('w')
            .requiredOption('--config <path to json>', 'config json')
            .requiredOption('--catalog <path to json>', 'catalog json')
            .option('--dry-run', 'dry run to skip writing records to destination', false)
            .action(async (opts) => {
            var _a;
            const config = require(path_1.default.resolve(opts.config));
            const catalog = require(path_1.default.resolve(opts.catalog));
            const spec = await this.destination.spec();
            this.logger.info('config: ' + (0, utils_1.redactConfig)(config, spec));
            this.logger.info('catalog: ' + JSON.stringify(catalog));
            this.logger.info('dryRun: ' + opts.dryRun);
            try {
                process.stdin.setEncoding('utf-8');
                const iter = this.destination.write(config, catalog, process.stdin, opts.dryRun);
                for await (const message of iter) {
                    this.logger.write(message);
                }
            }
            catch (e) {
                this.logger.error(`Encountered an error while writing to destination: ${(_a = e.message) !== null && _a !== void 0 ? _a : JSON.stringify(e)}`);
                throw e;
            }
            finally {
                process.stdin.destroy();
            }
        });
    }
}
exports.AirbyteDestinationRunner = AirbyteDestinationRunner;
