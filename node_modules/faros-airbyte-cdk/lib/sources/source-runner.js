"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirbyteSourceRunner = void 0;
const commander_1 = require("commander");
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
class AirbyteSourceRunner {
    constructor(logger, source) {
        this.logger = logger;
        this.source = source;
    }
    mainCommand() {
        return new commander_1.Command()
            .name('main')
            .version('v' + utils_1.PACKAGE_VERSION)
            .addCommand(this.specCommand())
            .addCommand(this.checkCommand())
            .addCommand(this.discoverCommand())
            .addCommand(this.readCommand());
    }
    specCommand() {
        return new commander_1.Command()
            .command('spec')
            .description('spec command')
            .alias('s')
            .action(async () => {
            const spec = await this.source.spec();
            // Expected output
            this.logger.write(spec);
        });
    }
    checkCommand() {
        return new commander_1.Command()
            .command('check')
            .description('check command')
            .alias('c')
            .requiredOption('--config <path to json>', 'config json')
            .action(async (opts) => {
            const config = require(path_1.default.resolve(opts.config));
            const status = await this.source.check(config);
            // Expected output
            this.logger.write(status);
        });
    }
    discoverCommand() {
        return new commander_1.Command()
            .command('discover')
            .description('discover command')
            .alias('d')
            .requiredOption('--config <path to json>', 'config json')
            .action(async (opts) => {
            const config = require(path_1.default.resolve(opts.config));
            const catalog = await this.source.discover(config);
            // Expected output
            this.logger.write(catalog);
        });
    }
    readCommand() {
        return new commander_1.Command()
            .command('read')
            .description('read command')
            .alias('r')
            .requiredOption('--config <path to json>', 'config json')
            .requiredOption('--catalog <path to json>', 'catalog json')
            .option('--state <path to json>', 'state json')
            .action(async (opts) => {
            const config = require(path_1.default.resolve(opts.config));
            const catalog = require(path_1.default.resolve(opts.catalog));
            const spec = await this.source.spec();
            this.logger.info('config: ' + (0, utils_1.redactConfig)(config, spec));
            this.logger.info('catalog: ' + JSON.stringify(catalog));
            let state = undefined;
            if (opts.state) {
                state = require(path_1.default.resolve(opts.state));
                this.logger.info('state: ' + JSON.stringify(state));
            }
            const iter = this.source.read(config, catalog, state);
            for await (const message of iter) {
                this.logger.write(message);
            }
        });
    }
}
exports.AirbyteSourceRunner = AirbyteSourceRunner;
