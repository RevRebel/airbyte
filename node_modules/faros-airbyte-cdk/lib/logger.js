"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirbyteLogger = void 0;
const pino_1 = __importDefault(require("pino"));
const stream_1 = __importDefault(require("stream"));
const protocol_1 = require("./protocol");
class AirbyteLogger {
    constructor(level) {
        this.level = protocol_1.AirbyteLogLevel.INFO;
        if (level) {
            this.level = level;
        }
        else if (process.env.LOG_LEVEL &&
            protocol_1.AirbyteLogLevel[process.env.LOG_LEVEL.toUpperCase()]) {
            this.level = protocol_1.AirbyteLogLevel[process.env.LOG_LEVEL.toUpperCase()];
        }
    }
    error(message) {
        this.log(protocol_1.AirbyteLogLevel.ERROR, message);
    }
    warn(message) {
        this.log(protocol_1.AirbyteLogLevel.WARN, message);
    }
    info(message) {
        this.log(protocol_1.AirbyteLogLevel.INFO, message);
    }
    debug(message) {
        this.log(protocol_1.AirbyteLogLevel.DEBUG, message);
    }
    trace(message) {
        this.log(protocol_1.AirbyteLogLevel.TRACE, message);
    }
    log(level, message) {
        this.write(protocol_1.AirbyteLog.make(level, message));
    }
    write(msg) {
        AirbyteLogger.writeMessage(msg, this.level);
    }
    /**
     * Creates a Pino Logger writing messages in Airbyte format
     *
     * @param level logging level
     * @returns Pino Logger
     */
    asPino(level = 'info') {
        const defaultLevel = protocol_1.AirbyteLogLevel[level.toUpperCase()];
        const destination = new stream_1.default.Writable({
            write: function (chunk, encoding, next) {
                const msg = JSON.parse(chunk);
                const lvl = msg.level
                    ? protocol_1.AirbyteLogLevel[pino_1.default.levels.labels[msg.level].toUpperCase()]
                    : defaultLevel;
                AirbyteLogger.writeMessage(protocol_1.AirbyteLog.make(lvl, msg.msg), defaultLevel);
                next();
            },
        });
        const logger = (0, pino_1.default)({ level }, destination);
        return logger;
    }
    static writeMessage(msg, level) {
        if (msg.type === protocol_1.AirbyteMessageType.LOG) {
            const levelOrder = (0, protocol_1.AirbyteLogLevelOrder)(level);
            const msgLevelOrder = (0, protocol_1.AirbyteLogLevelOrder)(msg.log.level);
            if (levelOrder > msgLevelOrder)
                return;
        }
        console.log(JSON.stringify(msg));
    }
}
exports.AirbyteLogger = AirbyteLogger;
